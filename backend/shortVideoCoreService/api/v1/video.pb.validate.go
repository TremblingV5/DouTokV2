// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: v1/video.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on Author with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Author) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Author with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in AuthorMultiError, or nil if none found.
func (m *Author) ValidateAll() error {
	return m.validate(true)
}

func (m *Author) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Name

	// no validation rules for Avatar

	// no validation rules for IsFollowing

	if len(errors) > 0 {
		return AuthorMultiError(errors)
	}

	return nil
}

// AuthorMultiError is an error wrapping multiple validation errors returned by
// Author.ValidateAll() if the designated constraints aren't met.
type AuthorMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m AuthorMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m AuthorMultiError) AllErrors() []error { return m }

// AuthorValidationError is the validation error returned by Author.Validate if
// the designated constraints aren't met.
type AuthorValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e AuthorValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e AuthorValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e AuthorValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e AuthorValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e AuthorValidationError) ErrorName() string { return "AuthorValidationError" }

// Error satisfies the builtin error interface
func (e AuthorValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sAuthor.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = AuthorValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = AuthorValidationError{}

// Validate checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Video) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Video with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in VideoMultiError, or nil if none found.
func (m *Video) ValidateAll() error {
	return m.validate(true)
}

func (m *Video) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for Title

	if all {
		switch v := interface{}(m.GetAuthor()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, VideoValidationError{
					field:  "Author",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetAuthor()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return VideoValidationError{
				field:  "Author",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for PlayUrl

	// no validation rules for CoverUrl

	// no validation rules for FavoriteCount

	// no validation rules for CommentCount

	// no validation rules for IsFavorite

	// no validation rules for UploadTime

	// no validation rules for Description

	if len(errors) > 0 {
		return VideoMultiError(errors)
	}

	return nil
}

// VideoMultiError is an error wrapping multiple validation errors returned by
// Video.ValidateAll() if the designated constraints aren't met.
type VideoMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m VideoMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m VideoMultiError) AllErrors() []error { return m }

// VideoValidationError is the validation error returned by Video.Validate if
// the designated constraints aren't met.
type VideoValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e VideoValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e VideoValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e VideoValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e VideoValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e VideoValidationError) ErrorName() string { return "VideoValidationError" }

// Error satisfies the builtin error interface
func (e VideoValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sVideo.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = VideoValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = VideoValidationError{}

// Validate checks the field values on FeedShortVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedShortVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedShortVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedShortVideoRequestMultiError, or nil if none found.
func (m *FeedShortVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedShortVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for LatestTime

	if m.GetUserId() <= 0 {
		err := FeedShortVideoRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetFeedNum() <= 0 {
		err := FeedShortVideoRequestValidationError{
			field:  "FeedNum",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return FeedShortVideoRequestMultiError(errors)
	}

	return nil
}

// FeedShortVideoRequestMultiError is an error wrapping multiple validation
// errors returned by FeedShortVideoRequest.ValidateAll() if the designated
// constraints aren't met.
type FeedShortVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedShortVideoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedShortVideoRequestMultiError) AllErrors() []error { return m }

// FeedShortVideoRequestValidationError is the validation error returned by
// FeedShortVideoRequest.Validate if the designated constraints aren't met.
type FeedShortVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedShortVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedShortVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedShortVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedShortVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedShortVideoRequestValidationError) ErrorName() string {
	return "FeedShortVideoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e FeedShortVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedShortVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedShortVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedShortVideoRequestValidationError{}

// Validate checks the field values on FeedShortVideoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *FeedShortVideoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on FeedShortVideoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// FeedShortVideoResponseMultiError, or nil if none found.
func (m *FeedShortVideoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *FeedShortVideoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, FeedShortVideoResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, FeedShortVideoResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return FeedShortVideoResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVideos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, FeedShortVideoResponseValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, FeedShortVideoResponseValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return FeedShortVideoResponseValidationError{
					field:  fmt.Sprintf("Videos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return FeedShortVideoResponseMultiError(errors)
	}

	return nil
}

// FeedShortVideoResponseMultiError is an error wrapping multiple validation
// errors returned by FeedShortVideoResponse.ValidateAll() if the designated
// constraints aren't met.
type FeedShortVideoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m FeedShortVideoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m FeedShortVideoResponseMultiError) AllErrors() []error { return m }

// FeedShortVideoResponseValidationError is the validation error returned by
// FeedShortVideoResponse.Validate if the designated constraints aren't met.
type FeedShortVideoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e FeedShortVideoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e FeedShortVideoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e FeedShortVideoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e FeedShortVideoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e FeedShortVideoResponseValidationError) ErrorName() string {
	return "FeedShortVideoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e FeedShortVideoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sFeedShortVideoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = FeedShortVideoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = FeedShortVideoResponseValidationError{}

// Validate checks the field values on GetVideoByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVideoByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVideoByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVideoByIdRequestMultiError, or nil if none found.
func (m *GetVideoByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVideoByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetVideoId() <= 0 {
		err := GetVideoByIdRequestValidationError{
			field:  "VideoId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return GetVideoByIdRequestMultiError(errors)
	}

	return nil
}

// GetVideoByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetVideoByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetVideoByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVideoByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVideoByIdRequestMultiError) AllErrors() []error { return m }

// GetVideoByIdRequestValidationError is the validation error returned by
// GetVideoByIdRequest.Validate if the designated constraints aren't met.
type GetVideoByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVideoByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVideoByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVideoByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVideoByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVideoByIdRequestValidationError) ErrorName() string {
	return "GetVideoByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetVideoByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVideoByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVideoByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVideoByIdRequestValidationError{}

// Validate checks the field values on GetVideoByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetVideoByIdResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetVideoByIdResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetVideoByIdResponseMultiError, or nil if none found.
func (m *GetVideoByIdResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetVideoByIdResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVideoByIdResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVideoByIdResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVideoByIdResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetVideo()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetVideoByIdResponseValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetVideoByIdResponseValidationError{
					field:  "Video",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetVideo()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetVideoByIdResponseValidationError{
				field:  "Video",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetVideoByIdResponseMultiError(errors)
	}

	return nil
}

// GetVideoByIdResponseMultiError is an error wrapping multiple validation
// errors returned by GetVideoByIdResponse.ValidateAll() if the designated
// constraints aren't met.
type GetVideoByIdResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetVideoByIdResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetVideoByIdResponseMultiError) AllErrors() []error { return m }

// GetVideoByIdResponseValidationError is the validation error returned by
// GetVideoByIdResponse.Validate if the designated constraints aren't met.
type GetVideoByIdResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetVideoByIdResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetVideoByIdResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetVideoByIdResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetVideoByIdResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetVideoByIdResponseValidationError) ErrorName() string {
	return "GetVideoByIdResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetVideoByIdResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetVideoByIdResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetVideoByIdResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetVideoByIdResponseValidationError{}

// Validate checks the field values on PublishVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishVideoRequestMultiError, or nil if none found.
func (m *PublishVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetTitle()); l < 1 || l > 50 {
		err := PublishVideoRequestValidationError{
			field:  "Title",
			reason: "value length must be between 1 and 50 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetCoverUrl()); l < 1 || l > 500 {
		err := PublishVideoRequestValidationError{
			field:  "CoverUrl",
			reason: "value length must be between 1 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetPlayUrl()); l < 1 || l > 500 {
		err := PublishVideoRequestValidationError{
			field:  "PlayUrl",
			reason: "value length must be between 1 and 500 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetDescription()) > 500 {
		err := PublishVideoRequestValidationError{
			field:  "Description",
			reason: "value length must be at most 500 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetUserId() <= 0 {
		err := PublishVideoRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return PublishVideoRequestMultiError(errors)
	}

	return nil
}

// PublishVideoRequestMultiError is an error wrapping multiple validation
// errors returned by PublishVideoRequest.ValidateAll() if the designated
// constraints aren't met.
type PublishVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishVideoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishVideoRequestMultiError) AllErrors() []error { return m }

// PublishVideoRequestValidationError is the validation error returned by
// PublishVideoRequest.Validate if the designated constraints aren't met.
type PublishVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishVideoRequestValidationError) ErrorName() string {
	return "PublishVideoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e PublishVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishVideoRequestValidationError{}

// Validate checks the field values on PublishVideoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *PublishVideoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on PublishVideoResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// PublishVideoResponseMultiError, or nil if none found.
func (m *PublishVideoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *PublishVideoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, PublishVideoResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, PublishVideoResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return PublishVideoResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for VideoId

	if len(errors) > 0 {
		return PublishVideoResponseMultiError(errors)
	}

	return nil
}

// PublishVideoResponseMultiError is an error wrapping multiple validation
// errors returned by PublishVideoResponse.ValidateAll() if the designated
// constraints aren't met.
type PublishVideoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m PublishVideoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m PublishVideoResponseMultiError) AllErrors() []error { return m }

// PublishVideoResponseValidationError is the validation error returned by
// PublishVideoResponse.Validate if the designated constraints aren't met.
type PublishVideoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e PublishVideoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e PublishVideoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e PublishVideoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e PublishVideoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e PublishVideoResponseValidationError) ErrorName() string {
	return "PublishVideoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e PublishVideoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sPublishVideoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = PublishVideoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = PublishVideoResponseValidationError{}

// Validate checks the field values on ListPublishedVideoRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublishedVideoRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublishedVideoRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPublishedVideoRequestMultiError, or nil if none found.
func (m *ListPublishedVideoRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublishedVideoRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if m.GetUserId() <= 0 {
		err := ListPublishedVideoRequestValidationError{
			field:  "UserId",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for LatestTime

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPublishedVideoRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPublishedVideoRequestValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPublishedVideoRequestValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPublishedVideoRequestMultiError(errors)
	}

	return nil
}

// ListPublishedVideoRequestMultiError is an error wrapping multiple validation
// errors returned by ListPublishedVideoRequest.ValidateAll() if the
// designated constraints aren't met.
type ListPublishedVideoRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublishedVideoRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublishedVideoRequestMultiError) AllErrors() []error { return m }

// ListPublishedVideoRequestValidationError is the validation error returned by
// ListPublishedVideoRequest.Validate if the designated constraints aren't met.
type ListPublishedVideoRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublishedVideoRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublishedVideoRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublishedVideoRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublishedVideoRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublishedVideoRequestValidationError) ErrorName() string {
	return "ListPublishedVideoRequestValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublishedVideoRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublishedVideoRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublishedVideoRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublishedVideoRequestValidationError{}

// Validate checks the field values on ListPublishedVideoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *ListPublishedVideoResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on ListPublishedVideoResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// ListPublishedVideoResponseMultiError, or nil if none found.
func (m *ListPublishedVideoResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *ListPublishedVideoResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMeta()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPublishedVideoResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPublishedVideoResponseValidationError{
					field:  "Meta",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMeta()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPublishedVideoResponseValidationError{
				field:  "Meta",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	for idx, item := range m.GetVideos() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, ListPublishedVideoResponseValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, ListPublishedVideoResponseValidationError{
						field:  fmt.Sprintf("Videos[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return ListPublishedVideoResponseValidationError{
					field:  fmt.Sprintf("Videos[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if all {
		switch v := interface{}(m.GetPagination()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, ListPublishedVideoResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, ListPublishedVideoResponseValidationError{
					field:  "Pagination",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetPagination()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return ListPublishedVideoResponseValidationError{
				field:  "Pagination",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return ListPublishedVideoResponseMultiError(errors)
	}

	return nil
}

// ListPublishedVideoResponseMultiError is an error wrapping multiple
// validation errors returned by ListPublishedVideoResponse.ValidateAll() if
// the designated constraints aren't met.
type ListPublishedVideoResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m ListPublishedVideoResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m ListPublishedVideoResponseMultiError) AllErrors() []error { return m }

// ListPublishedVideoResponseValidationError is the validation error returned
// by ListPublishedVideoResponse.Validate if the designated constraints aren't met.
type ListPublishedVideoResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e ListPublishedVideoResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e ListPublishedVideoResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e ListPublishedVideoResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e ListPublishedVideoResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e ListPublishedVideoResponseValidationError) ErrorName() string {
	return "ListPublishedVideoResponseValidationError"
}

// Error satisfies the builtin error interface
func (e ListPublishedVideoResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sListPublishedVideoResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = ListPublishedVideoResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = ListPublishedVideoResponseValidationError{}

// Validate checks the field values on MarkVideoUploadedRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarkVideoUploadedRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkVideoUploadedRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarkVideoUploadedRequestMultiError, or nil if none found.
func (m *MarkVideoUploadedRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkVideoUploadedRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MarkVideoUploadedRequestMultiError(errors)
	}

	return nil
}

// MarkVideoUploadedRequestMultiError is an error wrapping multiple validation
// errors returned by MarkVideoUploadedRequest.ValidateAll() if the designated
// constraints aren't met.
type MarkVideoUploadedRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkVideoUploadedRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkVideoUploadedRequestMultiError) AllErrors() []error { return m }

// MarkVideoUploadedRequestValidationError is the validation error returned by
// MarkVideoUploadedRequest.Validate if the designated constraints aren't met.
type MarkVideoUploadedRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkVideoUploadedRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkVideoUploadedRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkVideoUploadedRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkVideoUploadedRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkVideoUploadedRequestValidationError) ErrorName() string {
	return "MarkVideoUploadedRequestValidationError"
}

// Error satisfies the builtin error interface
func (e MarkVideoUploadedRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkVideoUploadedRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkVideoUploadedRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkVideoUploadedRequestValidationError{}

// Validate checks the field values on MarkVideoUploadedResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *MarkVideoUploadedResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on MarkVideoUploadedResponse with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// MarkVideoUploadedResponseMultiError, or nil if none found.
func (m *MarkVideoUploadedResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *MarkVideoUploadedResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if len(errors) > 0 {
		return MarkVideoUploadedResponseMultiError(errors)
	}

	return nil
}

// MarkVideoUploadedResponseMultiError is an error wrapping multiple validation
// errors returned by MarkVideoUploadedResponse.ValidateAll() if the
// designated constraints aren't met.
type MarkVideoUploadedResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MarkVideoUploadedResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MarkVideoUploadedResponseMultiError) AllErrors() []error { return m }

// MarkVideoUploadedResponseValidationError is the validation error returned by
// MarkVideoUploadedResponse.Validate if the designated constraints aren't met.
type MarkVideoUploadedResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MarkVideoUploadedResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MarkVideoUploadedResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MarkVideoUploadedResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MarkVideoUploadedResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MarkVideoUploadedResponseValidationError) ErrorName() string {
	return "MarkVideoUploadedResponseValidationError"
}

// Error satisfies the builtin error interface
func (e MarkVideoUploadedResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMarkVideoUploadedResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MarkVideoUploadedResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MarkVideoUploadedResponseValidationError{}
