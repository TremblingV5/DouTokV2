// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.7.3
// - protoc             v3.19.4
// source: svapi/video.proto

package svapi

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationShortVideoCoreVideoServiceFeedShortVideo = "/svapi.ShortVideoCoreVideoService/FeedShortVideo"
const OperationShortVideoCoreVideoServiceGetVideoById = "/svapi.ShortVideoCoreVideoService/GetVideoById"
const OperationShortVideoCoreVideoServiceListOthersPublishedVideo = "/svapi.ShortVideoCoreVideoService/ListOthersPublishedVideo"
const OperationShortVideoCoreVideoServiceListPublishedVideo = "/svapi.ShortVideoCoreVideoService/ListPublishedVideo"
const OperationShortVideoCoreVideoServicePreSign4UploadVideo = "/svapi.ShortVideoCoreVideoService/PreSign4UploadVideo"
const OperationShortVideoCoreVideoServiceReportFinishUpload = "/svapi.ShortVideoCoreVideoService/ReportFinishUpload"

type ShortVideoCoreVideoServiceHTTPServer interface {
	// FeedShortVideo 刷视频
	FeedShortVideo(context.Context, *FeedShortVideoRequest) (*FeedShortVideoResponse, error)
	// GetVideoById 获取视频信息
	GetVideoById(context.Context, *GetVideoByIdRequest) (*GetVideoByIdResponse, error)
	// ListOthersPublishedVideo 获取某人的发布视频列表
	ListOthersPublishedVideo(context.Context, *ListOthersPublishedVideoRequest) (*ListPublishedVideoResponse, error)
	// ListPublishedVideo 获取当前用户的发布视频列表
	ListPublishedVideo(context.Context, *ListPublishedVideoRequest) (*ListPublishedVideoResponse, error)
	// PreSign4UploadVideo 预注册上传视频
	PreSign4UploadVideo(context.Context, *PreSign4UploadVideoRequest) (*PreSign4UploadVideoResponse, error)
	// ReportFinishUpload 确认视频上传完成
	ReportFinishUpload(context.Context, *ReportFinishUploadRequest) (*ListVideo, error)
}

func RegisterShortVideoCoreVideoServiceHTTPServer(s *http.Server, srv ShortVideoCoreVideoServiceHTTPServer) {
	r := s.Route("/")
	r.POST("/videos", _ShortVideoCoreVideoService_PreSign4UploadVideo0_HTTP_Handler(srv))
	r.PUT("/videos/{file_id}/finish", _ShortVideoCoreVideoService_ReportFinishUpload0_HTTP_Handler(srv))
	r.POST("/videos/feed", _ShortVideoCoreVideoService_FeedShortVideo0_HTTP_Handler(srv))
	r.GET("/videos/{video_id}", _ShortVideoCoreVideoService_GetVideoById0_HTTP_Handler(srv))
	r.GET("/videos/list", _ShortVideoCoreVideoService_ListPublishedVideo0_HTTP_Handler(srv))
	r.GET("/videos/list/{account_id}", _ShortVideoCoreVideoService_ListOthersPublishedVideo0_HTTP_Handler(srv))
}

func _ShortVideoCoreVideoService_PreSign4UploadVideo0_HTTP_Handler(srv ShortVideoCoreVideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in PreSign4UploadVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortVideoCoreVideoServicePreSign4UploadVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.PreSign4UploadVideo(ctx, req.(*PreSign4UploadVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*PreSign4UploadVideoResponse)
		return ctx.Result(200, reply)
	}
}

func _ShortVideoCoreVideoService_ReportFinishUpload0_HTTP_Handler(srv ShortVideoCoreVideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ReportFinishUploadRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortVideoCoreVideoServiceReportFinishUpload)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ReportFinishUpload(ctx, req.(*ReportFinishUploadRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListVideo)
		return ctx.Result(200, reply)
	}
}

func _ShortVideoCoreVideoService_FeedShortVideo0_HTTP_Handler(srv ShortVideoCoreVideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in FeedShortVideoRequest
		if err := ctx.Bind(&in); err != nil {
			return err
		}
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortVideoCoreVideoServiceFeedShortVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.FeedShortVideo(ctx, req.(*FeedShortVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*FeedShortVideoResponse)
		return ctx.Result(200, reply)
	}
}

func _ShortVideoCoreVideoService_GetVideoById0_HTTP_Handler(srv ShortVideoCoreVideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetVideoByIdRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortVideoCoreVideoServiceGetVideoById)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetVideoById(ctx, req.(*GetVideoByIdRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetVideoByIdResponse)
		return ctx.Result(200, reply)
	}
}

func _ShortVideoCoreVideoService_ListPublishedVideo0_HTTP_Handler(srv ShortVideoCoreVideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListPublishedVideoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortVideoCoreVideoServiceListPublishedVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListPublishedVideo(ctx, req.(*ListPublishedVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPublishedVideoResponse)
		return ctx.Result(200, reply)
	}
}

func _ShortVideoCoreVideoService_ListOthersPublishedVideo0_HTTP_Handler(srv ShortVideoCoreVideoServiceHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListOthersPublishedVideoRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationShortVideoCoreVideoServiceListOthersPublishedVideo)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListOthersPublishedVideo(ctx, req.(*ListOthersPublishedVideoRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListPublishedVideoResponse)
		return ctx.Result(200, reply)
	}
}

type ShortVideoCoreVideoServiceHTTPClient interface {
	FeedShortVideo(ctx context.Context, req *FeedShortVideoRequest, opts ...http.CallOption) (rsp *FeedShortVideoResponse, err error)
	GetVideoById(ctx context.Context, req *GetVideoByIdRequest, opts ...http.CallOption) (rsp *GetVideoByIdResponse, err error)
	ListOthersPublishedVideo(ctx context.Context, req *ListOthersPublishedVideoRequest, opts ...http.CallOption) (rsp *ListPublishedVideoResponse, err error)
	ListPublishedVideo(ctx context.Context, req *ListPublishedVideoRequest, opts ...http.CallOption) (rsp *ListPublishedVideoResponse, err error)
	PreSign4UploadVideo(ctx context.Context, req *PreSign4UploadVideoRequest, opts ...http.CallOption) (rsp *PreSign4UploadVideoResponse, err error)
	ReportFinishUpload(ctx context.Context, req *ReportFinishUploadRequest, opts ...http.CallOption) (rsp *ListVideo, err error)
}

type ShortVideoCoreVideoServiceHTTPClientImpl struct {
	cc *http.Client
}

func NewShortVideoCoreVideoServiceHTTPClient(client *http.Client) ShortVideoCoreVideoServiceHTTPClient {
	return &ShortVideoCoreVideoServiceHTTPClientImpl{client}
}

func (c *ShortVideoCoreVideoServiceHTTPClientImpl) FeedShortVideo(ctx context.Context, in *FeedShortVideoRequest, opts ...http.CallOption) (*FeedShortVideoResponse, error) {
	var out FeedShortVideoResponse
	pattern := "/videos/feed"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShortVideoCoreVideoServiceFeedShortVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShortVideoCoreVideoServiceHTTPClientImpl) GetVideoById(ctx context.Context, in *GetVideoByIdRequest, opts ...http.CallOption) (*GetVideoByIdResponse, error) {
	var out GetVideoByIdResponse
	pattern := "/videos/{video_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShortVideoCoreVideoServiceGetVideoById))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShortVideoCoreVideoServiceHTTPClientImpl) ListOthersPublishedVideo(ctx context.Context, in *ListOthersPublishedVideoRequest, opts ...http.CallOption) (*ListPublishedVideoResponse, error) {
	var out ListPublishedVideoResponse
	pattern := "/videos/list/{account_id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShortVideoCoreVideoServiceListOthersPublishedVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShortVideoCoreVideoServiceHTTPClientImpl) ListPublishedVideo(ctx context.Context, in *ListPublishedVideoRequest, opts ...http.CallOption) (*ListPublishedVideoResponse, error) {
	var out ListPublishedVideoResponse
	pattern := "/videos/list"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationShortVideoCoreVideoServiceListPublishedVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShortVideoCoreVideoServiceHTTPClientImpl) PreSign4UploadVideo(ctx context.Context, in *PreSign4UploadVideoRequest, opts ...http.CallOption) (*PreSign4UploadVideoResponse, error) {
	var out PreSign4UploadVideoResponse
	pattern := "/videos"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShortVideoCoreVideoServicePreSign4UploadVideo))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "POST", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}

func (c *ShortVideoCoreVideoServiceHTTPClientImpl) ReportFinishUpload(ctx context.Context, in *ReportFinishUploadRequest, opts ...http.CallOption) (*ListVideo, error) {
	var out ListVideo
	pattern := "/videos/{file_id}/finish"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation(OperationShortVideoCoreVideoServiceReportFinishUpload))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, nil
}
