name: Lint Frontend Code
run-name: 'Lint Frontend Code ${{github.workflow}} #${{ github.event.pull_request.number }}'
on:
    pull_request_target:
        branches: [ main ]
        paths:
            - 'frontend/**'

concurrency:
    group: ${{ github.workflow }}-${{ github.event.pull_request.number }}
    cancel-in-progress: true

permissions: write-all

jobs:
    lint:
        runs-on: ubuntu-latest
        strategy:
            matrix:
                project: ['frontend/doutok']
        steps:
            - name: Checkout
              uses: actions/checkout@v4
              with:
                  lfs: true

            - name: cd
              run: |
                  cd ${{ matrix.project }}

            - name: Get date time
              id: getDateTime
              run: echo "result=$(TZ=Asia/Shanghai date)" >> "$GITHUB_OUTPUT"

            - name: Create or update a comment for start checking
              uses: thollander/actions-comment-pull-request@v2
              with:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
                  message: |
                      **Checking...**

                      ---

                      Commented by Action [${{github.workflow}} #${{ github.event.pull_request.number }}](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}), last updated on ${{steps.getDateTime.outputs.result}}.

            - name: Init pnpm
              uses: pnpm/action-setup@v2
              with:
                  version: 8

            - name: Init node
              id: node
              uses: actions/setup-node@v4
              with:
                  node-version: 20
                  cache: 'pnpm'

            - name: Install dependencies
              if: steps.node.outputs.cache-hit != 'true'
              run: pnpm install

            - name: Run ES lint
              id: eslint
              uses: actions/github-script@v7
              with:
                  result-encoding: string
                  script: |
                      let output = '';
                      let outerr = '';
                      let diffFiles = '';

                      await exec.exec(
                        `git diff --name-only --diff-filter=d origin/${{github.base_ref}}`,
                        [],
                        {
                          // silent: true,
                          // ignoreReturnCode: true,
                          listeners: {
                            stdout: (data) => {
                                diffFiles += data.toString();
                            },
                          },
                        }
                      );

                      const lintFiles = diffFiles.split(`\n`).filter((file) => {
                        return file.endsWith('.js') || file.endsWith('.ts') || file.endsWith('.tsx')
                      }).join(' ');

                      await exec.exec(
                        // "pnpm run lint --format stylish",
                        `pnpm eslint ${lintFiles}`,
                        [],
                        {
                          // silent: true,
                          ignoreReturnCode: true,
                          listeners: {
                            stdout: (data) => {
                                output += data.toString();
                            },
                            stderr: (data) => {
                                outerr += data.toString();
                            },
                          },
                        }
                      );

                      if (outerr) {
                        return `:x: Command execution failed.`;
                      }

                      const errorMatch = output.match(/(\d+) errors?/);
                      const warnMatch = output.match(/(\d+) warnings?/);

                      if (errorMatch && errorMatch?.[1] !== '0') {
                        return `
                        :x: ${errorMatch?.[0]} ${warnMatch?.[0]}.

                        <details><summary>Details</summary>
                        <p>

                        \`\`\`shell
                        ${output}
                        \`\`\`

                        </p>
                        </details>
                        `;
                      }

                      return `:white_check_mark: ${errorMatch?.[0] || '0 error'} ${warnMatch?.[0] || '0 warning'}.`;

            - name: Run Typescript lint
              id: tslint
              uses: actions/github-script@v7
              with:
                  result-encoding: string
                  script: |
                      let output = '';
                      let outerr = '';

                      await exec.exec(
                        `pnpm run -r lint:ts`,
                        [],
                        {
                          // silent: true,
                          ignoreReturnCode: true,
                          listeners: {
                            stdout: (data) => {
                                output += data.toString();
                            },
                            stderr: (data) => {
                                outerr += data.toString();
                            },
                          },
                        }
                      );

                      if (outerr) {
                        return `:x: Command execution failed.`;
                      }

                      const errorMatch = output.match(/error TS/g);

                      if (errorMatch) {
                        return `
                        :x: ${errorMatch?.length} errors.

                        <details><summary>Details</summary>
                        <p>

                        \`\`\`shell
                        ${output}
                        \`\`\`

                        </p>
                        </details>
                        `;
                      }

                      return `:white_check_mark: ${'0 error'}.`;

            - name: Unit Test
              id: ut
              uses: actions/github-script@v7
              with:
                  result-encoding: string
                  script: |
                      let output = '';
                      let outerr = '';

                      await exec.exec(
                        `pnpm run test`,
                        [],
                        {
                          // silent: true,
                          ignoreReturnCode: true,
                          listeners: {
                            stdout: (data) => {
                                output += data.toString();
                            },
                            stderr: (data) => {
                                outerr += data.toString();
                            },
                          },
                        }
                      );

                      // why use outerr? https://github.com/jestjs/jest/issues/5064

                      const failMatch = outerr.match(/Test Suites: \d+ failed/);

                      if (failMatch) {
                        return `
                        :x: ${failMatch?.[0]}.
                      
                        <details><summary>Details</summary>
                        <p>
                      
                        \`\`\`shell
                        ${outerr.substring(outerr.indexOf('Summary of all failing tests'))}
                        \`\`\`

                        </p>
                        </details>
                        `;
                      }

                      const errorMatch = outerr.match(/Jest: "global" coverage threshold for lines \([0-9\.]+%\) not met: [0-9\.]+%/);

                      if (errorMatch) {
                        return `:x: ${errorMatch?.[0]}.`;
                      }

                      return `:white_check_mark: passed.`;

            - name: Get date time for finishing
              id: getDateTimeForFinishing
              run: echo "result=$(TZ=Asia/Shanghai date)" >> "$GITHUB_OUTPUT"

            - name: Create or update a comment for result
              uses: thollander/actions-comment-pull-request@v2
              with:
                  message: |
                      ## Eslint Check Result

                      ${{needs.eslint.outputs.result}}

                      ## Typescript Check Result

                      ${{needs.typescript.outputs.result}}

                      ## UnitTest Check Result

                      ${{needs.unitTest.outputs.result}}

                      ---

                      Commented by Action [${{github.workflow}} #${{ github.event.pull_request.number }}](${{github.event.repository.html_url}}/actions/runs/${{github.run_id}}), last updated on ${{steps.getDateTime.outputs.result}}.